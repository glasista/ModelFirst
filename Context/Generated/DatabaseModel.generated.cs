//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v1.3.0.12
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace MyEntityClasses.Context
{
   /// <inheritdoc/>
   public partial class DatabaseModel : Microsoft.EntityFrameworkCore.DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::MyEntityClasses.Entities.ActorMovie> ActorMovie { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::MyEntityClasses.Entities.Actors> Actors { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::MyEntityClasses.Entities.Categories> Categories { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::MyEntityClasses.Entities.CategoryMovie> CategoryMovie { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::MyEntityClasses.Entities.Movies> Movies { get; set; }
      #endregion DbSets

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"(localdb)\mssqllocaldb";

      /// <inheritdoc />
      public DatabaseModel(DbContextOptions<DatabaseModel> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("ModelFirstDbSchema");

         modelBuilder.Entity<global::MyEntityClasses.Entities.ActorMovie>()
                     .ToTable("ActorMovie")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::MyEntityClasses.Entities.ActorMovie>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::MyEntityClasses.Entities.ActorMovie>()
                     .Property(t => t.ActorId)
                     .IsRequired();
         modelBuilder.Entity<global::MyEntityClasses.Entities.ActorMovie>()
                     .Property(t => t.MovieId)
                     .IsRequired();

         modelBuilder.Entity<global::MyEntityClasses.Entities.Actors>()
                     .ToTable("Actors")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::MyEntityClasses.Entities.Actors>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Actors>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Actors>()
                     .Property(t => t.Surname)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Actors>()
                     .HasMany(x => x.ActorMovies)
                     .WithOne()
                     .HasForeignKey("ActorMovie_ActorMovies_Id")
                     .IsRequired();

         modelBuilder.Entity<global::MyEntityClasses.Entities.Categories>()
                     .ToTable("Categories")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::MyEntityClasses.Entities.Categories>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Categories>()
                     .Property(t => t.Name)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Categories>()
                     .HasMany(x => x.CategoryMovie)
                     .WithOne()
                     .HasForeignKey("CategoryMovie_CategoryMovie_Id")
                     .IsRequired();

         modelBuilder.Entity<global::MyEntityClasses.Entities.CategoryMovie>()
                     .ToTable("CategoryMovie")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::MyEntityClasses.Entities.CategoryMovie>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();

         modelBuilder.Entity<global::MyEntityClasses.Entities.Movies>()
                     .ToTable("Movies")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::MyEntityClasses.Entities.Movies>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .ValueGeneratedOnAdd();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Movies>()
                     .Property(t => t.Title)
                     .HasMaxLength(255)
                     .IsRequired();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Movies>()
                     .HasMany(x => x.ActorMovies)
                     .WithOne()
                     .HasForeignKey("ActorMovie_ActorMovies_Id")
                     .IsRequired();
         modelBuilder.Entity<global::MyEntityClasses.Entities.Movies>()
                     .HasMany(x => x.CategoryMovie)
                     .WithOne()
                     .HasForeignKey("CategoryMovie_CategoryMovie_Id")
                     .IsRequired();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
